<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<!-- <hibernate-mapping>:一般不去配置，采用默认即可
  default-cascade="none"：默认的级联风格，表与表联动
  default-lazy="true"：默认延迟加载-->
    <!--<hibernate-mapping  default-cascade="none"default-lazy="true">-->
<hibernate-mapping>
<!--<class>:使用class元素定义一个持久化类-->
    <!--
    class标签属性：
    name="com.zhj.vo.User"：持久化类的java全限定名；
    table="sys_user"：对应数据库表名；
    multable="true"：默认为true，设置为false时则不可以被应用程序更新或删除；
    dynamic-insert="false"：默认为false，动态修改那些有改变过的字段，而不用修改所有字段；
    dynamic-update="false"：默认为false，动态插入非空字段；
    select-before-update="false"：默认为false，在修改之前先做一次查询，与用户的值进行对比，有变化时才真正更新；
    optimistic-lock="version"：主要用来处理并发，每条值都有固定且唯一的版本，版本为最新时才能执行操作；
    默认为"version"(检查version/timestamp字段)，取值：all(检查全部字段)，dirty(只检查修改过的字段)、none(不适用乐观锁)
    -->
    <class name="com.zhj.vo.User" table="sys_user" dynamic-insert="true" dynamic-update="true" optimistic-lock="version">
        <!-- <id>:定义了该属性到数据库表主键字段的映射。-->
        <!--
        id标签属性：
        name="id"：实体类中属性的名字
        column="id"：表中主键字段的名字，若不写则表示与name一样。
        -->
        <id name="id" column="id" type="java.lang.Long">
        <!-- <generator>：指定主键由什么生成，推荐使用uuid（随机生成唯一通用的表示符，实体类的ID必须是String）,
        native（让数据库自动选择用什么生成（根据底层数据库的能力选择identity，sequence或hilo中的一种）），
        assigned（指用户手工填入，默认）
        -->
            <generator class="native"/>
        <!--
        <version/>：使用版本控制来处理并发，要开启optimistic-lock="version"和dynamic-update="true"。
        name="version"：持久化类的属性名，column="version"：指定持有版本号的字段名；
     -->
        </id>
        <version name="version" column="version" type="java.lang.String"/>

        <!--
            <property>：为类定义一个持久化的javaBean风格的属性。
            name="name"：实体类中属性的名字，以小写字母开头；
            column="name"：表中字段的名字，如果不填写与name一样；
            update="true"/insert="true"：默认为true，表示可以被更新或插入；
         -->
        <property name="username" column="username" type="java.lang.String"/>
        <property name="password" column="password" type="java.lang.String"/>
        <property name="nickname" column="nickname" type="java.lang.String"/>
        <property name="phone" column="phone" type="java.lang.String"/>
        <property name="address" column="adress" type="java.lang.String"/>
        <property name="createTime" column="create_time" type="java.util.Date"/>
        <property name="updateTime" column="update_time" type="java.util.Date"/>

        <!--
            组件映射：把多个属性打包在一起当一个属性使用，用来把类的粒度变小。
            <component name="属性，这里指对象">
                <property name="name1"></property>
                <property name="name2"></property>
            </component>
         -->

        <!--
            <join>:一个对象映射多个表，该元素必须放在所有<property>之后。
            <join table="tbl_test：子表名">
                <key column="uuid：子表主键"></key>
            <property name="name1：对象属性" column="name：子表字段"></property>
         </join>
          -->
    </class>
</hibernate-mapping>